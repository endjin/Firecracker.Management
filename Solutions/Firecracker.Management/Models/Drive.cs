// <auto-generated/>
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System;
namespace Firecracker.Management.Models {
    #pragma warning disable CS1591
    public class Drive : IAdditionalDataHolder, IParsable 
    #pragma warning restore CS1591
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Represents the caching strategy for the block device.</summary>
        public Drive_cache_type? CacheType { get; set; }
        /// <summary>The drive_id property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? DriveId { get; set; }
#nullable restore
#else
        public string DriveId { get; set; }
#endif
        /// <summary>Type of the IO engine used by the device. &quot;Async&quot; is supported on host kernels newer than 5.10.51. This field is optional for virtio-block config and should be omitted for vhost-user-block configuration.</summary>
        public Drive_io_engine? IoEngine { get; set; }
        /// <summary>Is block read only. This field is required for virtio-block config and should be omitted for vhost-user-block configuration.</summary>
        public bool? IsReadOnly { get; set; }
        /// <summary>The is_root_device property</summary>
        public bool? IsRootDevice { get; set; }
        /// <summary>Represents the unique id of the boot partition of this device. It is optional and it will be taken into account only if the is_root_device field is true.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Partuuid { get; set; }
#nullable restore
#else
        public string Partuuid { get; set; }
#endif
        /// <summary>Host level path for the guest drive. This field is required for virtio-block config and should be omitted for vhost-user-block configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? PathOnHost { get; set; }
#nullable restore
#else
        public string PathOnHost { get; set; }
#endif
        /// <summary>Defines an IO rate limiter with independent bytes/s and ops/s limits. Limits are defined by configuring each of the _bandwidth_ and _ops_ token buckets. This field is optional for virtio-block config and should be omitted for vhost-user-block configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public Firecracker.Management.Models.RateLimiter? RateLimiter { get; set; }
#nullable restore
#else
        public Firecracker.Management.Models.RateLimiter RateLimiter { get; set; }
#endif
        /// <summary>Path to the socket of vhost-user-block backend. This field is required for vhost-user-block config should be omitted for virtio-block configuration.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? Socket { get; set; }
#nullable restore
#else
        public string Socket { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="Drive"/> and sets the default values.
        /// </summary>
        public Drive()
        {
            AdditionalData = new Dictionary<string, object>();
            CacheType = Drive_cache_type.Unsafe;
            IoEngine = Drive_io_engine.Sync;
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="Drive"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static Drive CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new Drive();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                {"cache_type", n => { CacheType = n.GetEnumValue<Drive_cache_type>(); } },
                {"drive_id", n => { DriveId = n.GetStringValue(); } },
                {"io_engine", n => { IoEngine = n.GetEnumValue<Drive_io_engine>(); } },
                {"is_read_only", n => { IsReadOnly = n.GetBoolValue(); } },
                {"is_root_device", n => { IsRootDevice = n.GetBoolValue(); } },
                {"partuuid", n => { Partuuid = n.GetStringValue(); } },
                {"path_on_host", n => { PathOnHost = n.GetStringValue(); } },
                {"rate_limiter", n => { RateLimiter = n.GetObjectValue<Firecracker.Management.Models.RateLimiter>(Firecracker.Management.Models.RateLimiter.CreateFromDiscriminatorValue); } },
                {"socket", n => { Socket = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteEnumValue<Drive_cache_type>("cache_type", CacheType);
            writer.WriteStringValue("drive_id", DriveId);
            writer.WriteEnumValue<Drive_io_engine>("io_engine", IoEngine);
            writer.WriteBoolValue("is_read_only", IsReadOnly);
            writer.WriteBoolValue("is_root_device", IsRootDevice);
            writer.WriteStringValue("partuuid", Partuuid);
            writer.WriteStringValue("path_on_host", PathOnHost);
            writer.WriteObjectValue<Firecracker.Management.Models.RateLimiter>("rate_limiter", RateLimiter);
            writer.WriteStringValue("socket", Socket);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
