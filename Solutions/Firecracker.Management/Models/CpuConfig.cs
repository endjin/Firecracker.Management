// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Firecracker.Management.Models
{
    /// <summary>
    /// The CPU configuration template defines a set of bit maps as modifiers of flags accessed by register to be disabled/enabled for the microvm.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class CpuConfig : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>A collection of CPUIDs to be modified. (x86_64)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Firecracker.Management.Models.CpuConfig_cpuid_modifiers? CpuidModifiers { get; set; }
#nullable restore
#else
        public global::Firecracker.Management.Models.CpuConfig_cpuid_modifiers CpuidModifiers { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Firecracker.Management.Models.CpuConfig_kvm_capabilities? KvmCapabilities { get; set; }
#nullable restore
#else
        public global::Firecracker.Management.Models.CpuConfig_kvm_capabilities KvmCapabilities { get; set; }
#endif
        /// <summary>A collection of model specific registers to be modified. (x86_64)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Firecracker.Management.Models.CpuConfig_msr_modifiers? MsrModifiers { get; set; }
#nullable restore
#else
        public global::Firecracker.Management.Models.CpuConfig_msr_modifiers MsrModifiers { get; set; }
#endif
        /// <summary>A collection of registers to be modified. (aarch64)</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Firecracker.Management.Models.CpuConfig_reg_modifiers? RegModifiers { get; set; }
#nullable restore
#else
        public global::Firecracker.Management.Models.CpuConfig_reg_modifiers RegModifiers { get; set; }
#endif
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Firecracker.Management.Models.CpuConfig_vcpu_features? VcpuFeatures { get; set; }
#nullable restore
#else
        public global::Firecracker.Management.Models.CpuConfig_vcpu_features VcpuFeatures { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Firecracker.Management.Models.CpuConfig"/> and sets the default values.
        /// </summary>
        public CpuConfig()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Firecracker.Management.Models.CpuConfig"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Firecracker.Management.Models.CpuConfig CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Firecracker.Management.Models.CpuConfig();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "cpuid_modifiers", n => { CpuidModifiers = n.GetObjectValue<global::Firecracker.Management.Models.CpuConfig_cpuid_modifiers>(global::Firecracker.Management.Models.CpuConfig_cpuid_modifiers.CreateFromDiscriminatorValue); } },
                { "kvm_capabilities", n => { KvmCapabilities = n.GetObjectValue<global::Firecracker.Management.Models.CpuConfig_kvm_capabilities>(global::Firecracker.Management.Models.CpuConfig_kvm_capabilities.CreateFromDiscriminatorValue); } },
                { "msr_modifiers", n => { MsrModifiers = n.GetObjectValue<global::Firecracker.Management.Models.CpuConfig_msr_modifiers>(global::Firecracker.Management.Models.CpuConfig_msr_modifiers.CreateFromDiscriminatorValue); } },
                { "reg_modifiers", n => { RegModifiers = n.GetObjectValue<global::Firecracker.Management.Models.CpuConfig_reg_modifiers>(global::Firecracker.Management.Models.CpuConfig_reg_modifiers.CreateFromDiscriminatorValue); } },
                { "vcpu_features", n => { VcpuFeatures = n.GetObjectValue<global::Firecracker.Management.Models.CpuConfig_vcpu_features>(global::Firecracker.Management.Models.CpuConfig_vcpu_features.CreateFromDiscriminatorValue); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteObjectValue<global::Firecracker.Management.Models.CpuConfig_cpuid_modifiers>("cpuid_modifiers", CpuidModifiers);
            writer.WriteObjectValue<global::Firecracker.Management.Models.CpuConfig_kvm_capabilities>("kvm_capabilities", KvmCapabilities);
            writer.WriteObjectValue<global::Firecracker.Management.Models.CpuConfig_msr_modifiers>("msr_modifiers", MsrModifiers);
            writer.WriteObjectValue<global::Firecracker.Management.Models.CpuConfig_reg_modifiers>("reg_modifiers", RegModifiers);
            writer.WriteObjectValue<global::Firecracker.Management.Models.CpuConfig_vcpu_features>("vcpu_features", VcpuFeatures);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
