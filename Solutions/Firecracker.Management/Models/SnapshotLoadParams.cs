// <auto-generated/>
#pragma warning disable CS0618
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using System.Collections.Generic;
using System.IO;
using System;
namespace Firecracker.Management.Models
{
    /// <summary>
    /// Defines the configuration used for handling snapshot resume. Exactly one of the two `mem_*` fields must be present in the body of the request.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.0.0")]
    public partial class SnapshotLoadParams : IAdditionalDataHolder, IParsable
    {
        /// <summary>Stores additional data not described in the OpenAPI description found when deserializing. Can be used for serialization as well.</summary>
        public IDictionary<string, object> AdditionalData { get; set; }
        /// <summary>Enable support for incremental (diff) snapshots by tracking dirty guest pages.</summary>
        public bool? EnableDiffSnapshots { get; set; }
        /// <summary>The mem_backend property</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public global::Firecracker.Management.Models.MemoryBackend? MemBackend { get; set; }
#nullable restore
#else
        public global::Firecracker.Management.Models.MemoryBackend MemBackend { get; set; }
#endif
        /// <summary>Path to the file that contains the guest memory to be loaded. It is only allowed if `mem_backend` is not present. This parameter has been deprecated and it will be removed in future Firecracker release.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? MemFilePath { get; set; }
#nullable restore
#else
        public string MemFilePath { get; set; }
#endif
        /// <summary>When set to true, the vm is also resumed if the snapshot load is successful.</summary>
        public bool? ResumeVm { get; set; }
        /// <summary>Path to the file that contains the microVM state to be loaded.</summary>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public string? SnapshotPath { get; set; }
#nullable restore
#else
        public string SnapshotPath { get; set; }
#endif
        /// <summary>
        /// Instantiates a new <see cref="global::Firecracker.Management.Models.SnapshotLoadParams"/> and sets the default values.
        /// </summary>
        public SnapshotLoadParams()
        {
            AdditionalData = new Dictionary<string, object>();
        }
        /// <summary>
        /// Creates a new instance of the appropriate class based on discriminator value
        /// </summary>
        /// <returns>A <see cref="global::Firecracker.Management.Models.SnapshotLoadParams"/></returns>
        /// <param name="parseNode">The parse node to use to read the discriminator value and create the object</param>
        public static global::Firecracker.Management.Models.SnapshotLoadParams CreateFromDiscriminatorValue(IParseNode parseNode)
        {
            _ = parseNode ?? throw new ArgumentNullException(nameof(parseNode));
            return new global::Firecracker.Management.Models.SnapshotLoadParams();
        }
        /// <summary>
        /// The deserialization information for the current model
        /// </summary>
        /// <returns>A IDictionary&lt;string, Action&lt;IParseNode&gt;&gt;</returns>
        public virtual IDictionary<string, Action<IParseNode>> GetFieldDeserializers()
        {
            return new Dictionary<string, Action<IParseNode>>
            {
                { "enable_diff_snapshots", n => { EnableDiffSnapshots = n.GetBoolValue(); } },
                { "mem_backend", n => { MemBackend = n.GetObjectValue<global::Firecracker.Management.Models.MemoryBackend>(global::Firecracker.Management.Models.MemoryBackend.CreateFromDiscriminatorValue); } },
                { "mem_file_path", n => { MemFilePath = n.GetStringValue(); } },
                { "resume_vm", n => { ResumeVm = n.GetBoolValue(); } },
                { "snapshot_path", n => { SnapshotPath = n.GetStringValue(); } },
            };
        }
        /// <summary>
        /// Serializes information the current object
        /// </summary>
        /// <param name="writer">Serialization writer to use to serialize this model</param>
        public virtual void Serialize(ISerializationWriter writer)
        {
            _ = writer ?? throw new ArgumentNullException(nameof(writer));
            writer.WriteBoolValue("enable_diff_snapshots", EnableDiffSnapshots);
            writer.WriteObjectValue<global::Firecracker.Management.Models.MemoryBackend>("mem_backend", MemBackend);
            writer.WriteStringValue("mem_file_path", MemFilePath);
            writer.WriteBoolValue("resume_vm", ResumeVm);
            writer.WriteStringValue("snapshot_path", SnapshotPath);
            writer.WriteAdditionalData(AdditionalData);
        }
    }
}
#pragma warning restore CS0618
