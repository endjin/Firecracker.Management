// <auto-generated/>
using Firecracker.Management.Actions;
using Firecracker.Management.Balloon;
using Firecracker.Management.BootSource;
using Firecracker.Management.CpuConfig;
using Firecracker.Management.Drives;
using Firecracker.Management.Entropy;
using Firecracker.Management.Logger;
using Firecracker.Management.MachineConfig;
using Firecracker.Management.Metrics;
using Firecracker.Management.Mmds;
using Firecracker.Management.Models;
using Firecracker.Management.NetworkInterfaces;
using Firecracker.Management.Snapshot;
using Firecracker.Management.VersionNamespace;
using Firecracker.Management.Vm;
using Firecracker.Management.Vsock;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Firecracker.Management {
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    public class FirecrackerManagementClient : BaseRequestBuilder {
        /// <summary>The actions property</summary>
        public ActionsRequestBuilder Actions { get =>
            new ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The balloon property</summary>
        public BalloonRequestBuilder Balloon { get =>
            new BalloonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bootSource property</summary>
        public BootSourceRequestBuilder BootSource { get =>
            new BootSourceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cpuConfig property</summary>
        public CpuConfigRequestBuilder CpuConfig { get =>
            new CpuConfigRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The drives property</summary>
        public DrivesRequestBuilder Drives { get =>
            new DrivesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The entropy property</summary>
        public EntropyRequestBuilder Entropy { get =>
            new EntropyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logger property</summary>
        public LoggerRequestBuilder Logger { get =>
            new LoggerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The machineConfig property</summary>
        public MachineConfigRequestBuilder MachineConfig { get =>
            new MachineConfigRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The metrics property</summary>
        public MetricsRequestBuilder Metrics { get =>
            new MetricsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mmds property</summary>
        public MmdsRequestBuilder Mmds { get =>
            new MmdsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The networkInterfaces property</summary>
        public NetworkInterfacesRequestBuilder NetworkInterfaces { get =>
            new NetworkInterfacesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The snapshot property</summary>
        public SnapshotRequestBuilder Snapshot { get =>
            new SnapshotRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The version property</summary>
        public VersionRequestBuilder Version { get =>
            new VersionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The vm property</summary>
        public VmRequestBuilder Vm { get =>
            new VmRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The vsock property</summary>
        public VsockRequestBuilder Vsock { get =>
            new VsockRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new FirecrackerManagementClient and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FirecrackerManagementClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>()) {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl)) {
                RequestAdapter.BaseUrl = "http://localhost";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
        /// <summary>
        /// Returns general information about an instance.
        /// </summary>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<InstanceInfo?> GetAsync(Action<FirecrackerManagementClientGetRequestConfiguration>? requestConfiguration = default, CancellationToken cancellationToken = default) {
#nullable restore
#else
        public async Task<InstanceInfo> GetAsync(Action<FirecrackerManagementClientGetRequestConfiguration> requestConfiguration = default, CancellationToken cancellationToken = default) {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>> {
                {"4XX", Error.CreateFromDiscriminatorValue},
                {"5XX", Error.CreateFromDiscriminatorValue},
            };
            return await RequestAdapter.SendAsync<InstanceInfo>(requestInfo, InstanceInfo.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns general information about an instance.
        /// </summary>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<FirecrackerManagementClientGetRequestConfiguration>? requestConfiguration = default) {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<FirecrackerManagementClientGetRequestConfiguration> requestConfiguration = default) {
#endif
            var requestInfo = new RequestInformation {
                HttpMethod = Method.GET,
                UrlTemplate = UrlTemplate,
                PathParameters = PathParameters,
            };
            if (requestConfiguration != null) {
                var requestConfig = new FirecrackerManagementClientGetRequestConfiguration();
                requestConfiguration.Invoke(requestConfig);
                requestInfo.AddRequestOptions(requestConfig.Options);
                requestInfo.AddHeaders(requestConfig.Headers);
            }
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        public class FirecrackerManagementClientGetRequestConfiguration {
            /// <summary>Request headers</summary>
            public RequestHeaders Headers { get; set; }
            /// <summary>Request options</summary>
            public IList<IRequestOption> Options { get; set; }
            /// <summary>
            /// Instantiates a new FirecrackerManagementClientGetRequestConfiguration and sets the default values.
            /// </summary>
            public FirecrackerManagementClientGetRequestConfiguration() {
                Options = new List<IRequestOption>();
                Headers = new RequestHeaders();
            }
        }
    }
}
