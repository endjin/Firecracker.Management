// <auto-generated/>
#pragma warning disable CS0618
using Firecracker.Management.Actions;
using Firecracker.Management.Balloon;
using Firecracker.Management.BootSource;
using Firecracker.Management.CpuConfig;
using Firecracker.Management.Drives;
using Firecracker.Management.Entropy;
using Firecracker.Management.Logger;
using Firecracker.Management.MachineConfig;
using Firecracker.Management.Metrics;
using Firecracker.Management.Mmds;
using Firecracker.Management.Models;
using Firecracker.Management.NetworkInterfaces;
using Firecracker.Management.Snapshot;
using Firecracker.Management.VersionNamespace;
using Firecracker.Management.Vm;
using Firecracker.Management.Vsock;
using Microsoft.Kiota.Abstractions.Extensions;
using Microsoft.Kiota.Abstractions.Serialization;
using Microsoft.Kiota.Abstractions;
using Microsoft.Kiota.Serialization.Form;
using Microsoft.Kiota.Serialization.Json;
using Microsoft.Kiota.Serialization.Multipart;
using Microsoft.Kiota.Serialization.Text;
using System.Collections.Generic;
using System.IO;
using System.Threading.Tasks;
using System.Threading;
using System;
namespace Firecracker.Management
{
    /// <summary>
    /// The main entry point of the SDK, exposes the configuration and the fluent API.
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
    public partial class FirecrackerManagementClient : BaseRequestBuilder
    {
        /// <summary>The actions property</summary>
        public global::Firecracker.Management.Actions.ActionsRequestBuilder Actions
        {
            get => new global::Firecracker.Management.Actions.ActionsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The balloon property</summary>
        public global::Firecracker.Management.Balloon.BalloonRequestBuilder Balloon
        {
            get => new global::Firecracker.Management.Balloon.BalloonRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The bootSource property</summary>
        public global::Firecracker.Management.BootSource.BootSourceRequestBuilder BootSource
        {
            get => new global::Firecracker.Management.BootSource.BootSourceRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The cpuConfig property</summary>
        public global::Firecracker.Management.CpuConfig.CpuConfigRequestBuilder CpuConfig
        {
            get => new global::Firecracker.Management.CpuConfig.CpuConfigRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The drives property</summary>
        public global::Firecracker.Management.Drives.DrivesRequestBuilder Drives
        {
            get => new global::Firecracker.Management.Drives.DrivesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The entropy property</summary>
        public global::Firecracker.Management.Entropy.EntropyRequestBuilder Entropy
        {
            get => new global::Firecracker.Management.Entropy.EntropyRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The logger property</summary>
        public global::Firecracker.Management.Logger.LoggerRequestBuilder Logger
        {
            get => new global::Firecracker.Management.Logger.LoggerRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The machineConfig property</summary>
        public global::Firecracker.Management.MachineConfig.MachineConfigRequestBuilder MachineConfig
        {
            get => new global::Firecracker.Management.MachineConfig.MachineConfigRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The metrics property</summary>
        public global::Firecracker.Management.Metrics.MetricsRequestBuilder Metrics
        {
            get => new global::Firecracker.Management.Metrics.MetricsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The mmds property</summary>
        public global::Firecracker.Management.Mmds.MmdsRequestBuilder Mmds
        {
            get => new global::Firecracker.Management.Mmds.MmdsRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The networkInterfaces property</summary>
        public global::Firecracker.Management.NetworkInterfaces.NetworkInterfacesRequestBuilder NetworkInterfaces
        {
            get => new global::Firecracker.Management.NetworkInterfaces.NetworkInterfacesRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The snapshot property</summary>
        public global::Firecracker.Management.Snapshot.SnapshotRequestBuilder Snapshot
        {
            get => new global::Firecracker.Management.Snapshot.SnapshotRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The version property</summary>
        public global::Firecracker.Management.VersionNamespace.VersionRequestBuilder Version
        {
            get => new global::Firecracker.Management.VersionNamespace.VersionRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The vm property</summary>
        public global::Firecracker.Management.Vm.VmRequestBuilder Vm
        {
            get => new global::Firecracker.Management.Vm.VmRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>The vsock property</summary>
        public global::Firecracker.Management.Vsock.VsockRequestBuilder Vsock
        {
            get => new global::Firecracker.Management.Vsock.VsockRequestBuilder(PathParameters, RequestAdapter);
        }
        /// <summary>
        /// Instantiates a new <see cref="global::Firecracker.Management.FirecrackerManagementClient"/> and sets the default values.
        /// </summary>
        /// <param name="requestAdapter">The request adapter to use to execute the requests.</param>
        public FirecrackerManagementClient(IRequestAdapter requestAdapter) : base(requestAdapter, "{+baseurl}", new Dictionary<string, object>())
        {
            ApiClientBuilder.RegisterDefaultSerializer<JsonSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<TextSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<FormSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultSerializer<MultipartSerializationWriterFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<JsonParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<TextParseNodeFactory>();
            ApiClientBuilder.RegisterDefaultDeserializer<FormParseNodeFactory>();
            if (string.IsNullOrEmpty(RequestAdapter.BaseUrl))
            {
                RequestAdapter.BaseUrl = "http://localhost";
            }
            PathParameters.TryAdd("baseurl", RequestAdapter.BaseUrl);
        }
        /// <summary>
        /// Returns general information about an instance.
        /// </summary>
        /// <returns>A <see cref="global::Firecracker.Management.Models.InstanceInfo"/></returns>
        /// <param name="cancellationToken">Cancellation token to use when cancelling requests</param>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
        /// <exception cref="global::Firecracker.Management.Models.Error">When receiving a 4XX or 5XX status code</exception>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public async Task<global::Firecracker.Management.Models.InstanceInfo?> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#nullable restore
#else
        public async Task<global::Firecracker.Management.Models.InstanceInfo> GetAsync(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default, CancellationToken cancellationToken = default)
        {
#endif
            var requestInfo = ToGetRequestInformation(requestConfiguration);
            var errorMapping = new Dictionary<string, ParsableFactory<IParsable>>
            {
                { "XXX", global::Firecracker.Management.Models.Error.CreateFromDiscriminatorValue },
            };
            return await RequestAdapter.SendAsync<global::Firecracker.Management.Models.InstanceInfo>(requestInfo, global::Firecracker.Management.Models.InstanceInfo.CreateFromDiscriminatorValue, errorMapping, cancellationToken).ConfigureAwait(false);
        }
        /// <summary>
        /// Returns general information about an instance.
        /// </summary>
        /// <returns>A <see cref="RequestInformation"/></returns>
        /// <param name="requestConfiguration">Configuration for the request such as headers, query parameters, and middleware options.</param>
#if NETSTANDARD2_1_OR_GREATER || NETCOREAPP3_1_OR_GREATER
#nullable enable
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>>? requestConfiguration = default)
        {
#nullable restore
#else
        public RequestInformation ToGetRequestInformation(Action<RequestConfiguration<DefaultQueryParameters>> requestConfiguration = default)
        {
#endif
            var requestInfo = new RequestInformation(Method.GET, UrlTemplate, PathParameters);
            requestInfo.Configure(requestConfiguration);
            requestInfo.Headers.TryAdd("Accept", "application/json");
            return requestInfo;
        }
        /// <summary>
        /// Configuration for the request such as headers, query parameters, and middleware options.
        /// </summary>
        [Obsolete("This class is deprecated. Please use the generic RequestConfiguration class generated by the generator.")]
        [global::System.CodeDom.Compiler.GeneratedCode("Kiota", "1.18.0")]
        public partial class FirecrackerManagementClientGetRequestConfiguration : RequestConfiguration<DefaultQueryParameters>
        {
        }
    }
}
#pragma warning restore CS0618
